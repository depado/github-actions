---
name: Go CI/CD Pipeline

on:
  workflow_call:
    inputs:
      runs-on:
        description: 'Runner to use for jobs'
        required: false
        type: string
        default: 'ubuntu-latest'
      go-version-strategy:
        description: 'Go version strategy: "file" to use go.mod or "stable" for latest stable'
        required: false
        type: string
        default: 'stable'
      enable-coverage:
        description: 'Enable coverage reporting'
        required: false
        type: boolean
        default: true
      golangci-timeout:
        description: 'Timeout for golangci-lint'
        required: false
        type: string
        default: '3m'
      working-directory:
        description: 'Working directory for the project'
        required: false
        type: string
        default: '.'
      build-command:
        description: 'Build command to run'
        required: false
        type: string
        default: 'make build'
      fail-coverage:
        description: 'Fail the build if coverage is below threshold'
        required: false
        type: string
        default: 'never'

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Go (from go.mod)
        if: inputs.go-version-strategy == 'file'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "${{ inputs.working-directory }}/go.mod"

      - name: Set up Go (stable)
        if: inputs.go-version-strategy == 'stable'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: stable

      - name: Build
        run: ${{ inputs.build-command }}

  test:
    needs: build
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 10

      - name: Set up Go (from go.mod)
        if: inputs.go-version-strategy == 'file'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "${{ inputs.working-directory }}/go.mod"

      - name: Set up Go (stable)
        if: inputs.go-version-strategy == 'stable'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: stable

      - name: Run coverage
        if: inputs.enable-coverage
        uses: lazyguru/go-coverage-action@9b496d245c69f85ab8cef4ce57d857cc727506ee
        with:
          fail-coverage: ${{ inputs.fail-coverage }}
          cover-pkg: ./...

  golangci:
    needs: build
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Go (from go.mod)
        if: inputs.go-version-strategy == 'file'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: "${{ inputs.working-directory }}/go.mod"

      - name: Set up Go (stable)
        if: inputs.go-version-strategy == 'stable'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: stable

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
        with:
          version: latest
          args: --timeout=${{ inputs.golangci-timeout }}
          working-directory: ${{ inputs.working-directory }}
